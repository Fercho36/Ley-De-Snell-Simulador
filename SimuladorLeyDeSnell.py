import tkinter as tk # Se importa la libreria tkinter para hacer la interfaz grafica
import customtkinter as ctk # Se importa la libreria customtkinter para mejorar la interfaz gr√°fica y hacerla as moderno
import math # Se importa la funcion math para

# ================================================================ # Comentario que inicia una secci√≥n decorativa con un separador visual para la descripci√≥n del simulador
# üß™ SIMULADOR DE LA LEY DE SNELL # Comentario con el t√≠tulo del simulador, usando un emoji para decoraci√≥n
# ------------------------------------------------ # Comentario con un separador horizontal
# Descripci√≥n: # Comentario que inicia la descripci√≥n del programa
#   Este simulador muestra gr√°ficamente c√≥mo se refracta y refleja # Continuaci√≥n del comentario descriptivo, explicando la funcionalidad gr√°fica de refracci√≥n y reflexi√≥n de rayos de luz
#   un rayo de luz al pasar por distintas interfaces (materiales). # Continuaci√≥n, especificando que simula el paso de luz por interfaces de materiales
#   Permite cambiar el n√∫mero de interfaces, materiales y √°ngulo # Continuaci√≥n, mencionando las opciones interactivas para el usuario
#   de incidencia. Se basa en la Ley de Snell: # Continuaci√≥n, indicando la base f√≠sica en la Ley de Snell
# # L√≠nea vac√≠a en el comentario para separaci√≥n
#        n‚ÇÅ * sin(Œ∏‚ÇÅ) = n‚ÇÇ * sin(Œ∏‚ÇÇ) # Comentario que muestra la f√≥rmula de la Ley de Snell, donde n1 y n2 son √≠ndices de refracci√≥n, Œ∏1 y Œ∏2 son √°ngulos respecto a la normal
# # L√≠nea vac√≠a en el comentario
#   Donde Œ∏ es el √°ngulo respecto a la normal (l√≠nea vertical). # Comentario explicando qu√© representa Œ∏ en la f√≥rmula
# ================================================================ # Comentario que cierra la secci√≥n descriptiva con un separador visual

# Configuraci√≥n inicial del tema de CustomTkinter # Comentario que indica el inicio de la configuraci√≥n inicial de temas para customtkinter
ctk.set_appearance_mode("dark")  # Modo oscuro por defecto # Esta l√≠nea establece el modo de apariencia inicial de customtkinter en "dark" (oscuro), afectando los colores de todos los widgets
ctk.set_default_color_theme("blue")  # Tema azul # Esta l√≠nea establece el tema de color predeterminado en "blue", que define la paleta de colores base para los widgets

class SimuladorSnell: # Se crea una clase para hacer el simulador # Esta l√≠nea define la clase SimuladorSnell, que encapsula toda la l√≥gica y elementos del simulador de la Ley de Snell

    def __init__(self, ventana_principal): # Definici√≥n del constructor de la clase, que recibe ventana_principal como par√°metro (la ventana ra√≠z de la GUI)
        """ Se crea el constructor de la clase para inicializar la ventana principal del simulador, # Docstring que describe el prop√≥sito del constructor: inicializar la ventana, variables y controles
            las variables globales y los controles de usuario.""" # Continuaci√≥n del docstring

        self.ventana_principal = ventana_principal # Le asigna la ventana que llega como parametro a la ventana de la clase # Esta l√≠nea asigna el par√°metro ventana_principal a un atributo de instancia self.ventana_principal para acceso dentro de la clase
        self.ventana_principal.title("SIMULADOR DE LA LEY DE SNELL") # Se le asigna el titulo a la ventana # Esta l√≠nea establece el t√≠tulo de la ventana principal como "SIMULADOR DE LA LEY DE SNELL"
        self.ventana_principal.geometry("1600x900") # Se definen sus dimensiones # Esta l√≠nea configura el tama√±o inicial de la ventana a 1600 p√≠xeles de ancho por 900 de alto

        # Personaliza el color de fondo general con un degradado desde #E8EDF2 (gris azulado claro) hasta #1a1a2e (azul muy oscuro) # Comentario explicando la personalizaci√≥n del fondo
        self.ventana_principal.configure(fg_color=("#E8EDF2", "#1a1a2e")) # Esta l√≠nea configura el color de foreground (fondo) de la ventana como una tupla para modos claro y oscuro, creando un efecto de degradado

        # Se crea un diccionario de materiales disponibles para las interfaces, con sus √≠ndices de refracci√≥n # Comentario describiendo el diccionario de materiales
        self.materiales_disponibles = { # Inicio de la definici√≥n del atributo self.materiales_disponibles como un diccionario
            "Vac√≠o": 1.0, # Clave "Vac√≠o" con valor 1.0 (√≠ndice de refracci√≥n del vac√≠o)
            "Aire": 1.0003, # Clave "Aire" con valor 1.0003 (√≠ndice aproximado del aire)
            "Agua": 1.333, # Clave "Agua" con valor 1.333 (√≠ndice del agua)
            "Vidrio": 1.5, # Clave "Vidrio" con valor 1.5 (√≠ndice t√≠pico del vidrio)
            "Diamante": 2.417, # Clave "Diamante" con valor 2.417 (√≠ndice del diamante)
            "Personalizado": 1.5 # Clave "Personalizado" con valor predeterminado 1.5 para √≠ndices personalizados
        } # Cierre del diccionario

        # Se personalizan los colores para cada medio (interfaz) # Comentario describiendo la lista de colores para las capas
        # Azul muy oscuro, Azul noche oscuro, Azul medianamente oscuro, P√∫rpura oscuro, Lila # Comentario detallando los colores
        self.colores_capas = ["#1a1a2e", "#16213e", "#0f3460", "#533483", "#94618e"] # Esta l√≠nea define self.colores_capas como una lista de c√≥digos hexadecimales de colores para representar visualmente cada capa en el canvas

        # Variables de configuraci√≥n inicial # Comentario indicando el inicio de variables de configuraci√≥n
        self.numero_interfaces = tk.IntVar(value=1)  # N√∫mero de interfaces por defecto al iniciar la ejecuci√≥n # Esta l√≠nea crea self.numero_interfaces como una variable entera de tkinter inicializada en 1, para rastrear el n√∫mero de interfaces activas
        self.angulo_incidente = tk.DoubleVar(value=30.0)  # Inicializa el √°ngulo con respecto al eje X (horizontal) en 30¬∞ # Esta l√≠nea crea self.angulo_incidente como una variable flotante de tkinter inicializada en 30.0 grados

        # Lista de materiales seleccionados por el usuario # Comentario describiendo la lista de materiales seleccionados
        self.materiales_seleccionados = [tk.StringVar(value="Vac√≠o")] # Se crea una lista que contiene una variable de texto de Tkinter y se inicializa en "Vac√≠o" # Esta l√≠nea inicializa self.materiales_seleccionados como una lista con una StringVar de tkinter set en "Vac√≠o" para la primera capa
        self.indices_personalizados = [tk.DoubleVar(value=1.0)] # Se crea una lista que contiene una variable decimal de Tkinter y se inicializa en 1.0 # Esta l√≠nea inicializa self.indices_personalizados como una lista con una DoubleVar set en 1.0 para √≠ndices personalizados

        # Inicializa los materiales por defecto para las 4 capas adicionales, respectivamente # Comentario explicando la inicializaci√≥n de materiales predeterminados
        materiales_predeterminados = ["Aire", "Agua", "Vidrio", "Diamante"] # Esta l√≠nea define una lista local con materiales predeterminados para las capas adicionales
        for i in range(4): # Recorre la lista anterior con un ciclo for # Esta l√≠nea inicia un bucle for que itera 4 veces (i de 0 a 3)
            self.materiales_seleccionados.append(tk.StringVar(value=materiales_predeterminados[i])) # Agrega a la lista de materiales_seleccionados los materiales predeterminados # Esta l√≠nea agrega una nueva StringVar con el material predeterminado correspondiente a la lista self.materiales_seleccionados
            self.indices_personalizados.append(tk.DoubleVar(value=1.5)) # Agrega a la lista de indices_personalizados un √≠ndice personalizado de 1.5 por defecto # Esta l√≠nea agrega una nueva DoubleVar con valor 1.5 a self.indices_personalizados

        # Inicializar la interfaz gr√°fica # Comentario indicando la inicializaci√≥n de la GUI
        self.crear_interfaz_usuario() # Llama a la funcion crear_interfaz_usuario() # Esta l√≠nea llama al m√©todo self.crear_interfaz_usuario() para construir los elementos de la interfaz
        self.actualizar_simulacion() # Llama a la funcion actualizar_simulacion() # Esta l√≠nea llama al m√©todo self.actualizar_simulacion() para dibujar la simulaci√≥n inicial en el canvas

    def crear_interfaz_usuario(self): # Definici√≥n del m√©todo crear_interfaz_usuario, que no recibe par√°metros adicionales adem√°s de self
        """Se crea el metodo para crear todos los controles de la interfaz del simulador.""" # Docstring describiendo el prop√≥sito del m√©todo: crear todos los controles de la interfaz

        # Crea un frame para usarlo como marco principal para almacenar dentro de el todos los elementos, # Comentario explicando la creaci√≥n del frame principal
        # se coloca en la venta principal, y se hace tranparente para que no se note # Continuaci√≥n del comentario
        marco_principal = ctk.CTkFrame(self.ventana_principal, fg_color="transparent") # Esta l√≠nea crea un CTkFrame (frame personalizado) en la ventana principal, con color de fondo transparente
        # Se indica que el frame se extiende a toda la ventana, y si la ventana crece, el frame tambi√©n # Comentario explicando el packing del frame
        # adem√°s deja un margen de 15px alrededor del frame # Continuaci√≥n
        marco_principal.pack(fill=tk.BOTH, expand=True, padx=15, pady=15) # Esta l√≠nea empaqueta el frame para que llene ambos ejes, se expanda con la ventana, y agregue padding de 15 p√≠xeles

        # Se crea un frame para contener el t√≠tulo (header), dentro del frame anterior, con una altura de 60px, # Comentario describiendo la creaci√≥n del header_frame
        # se redondean las esquinas con un radio de 12px # Continuaci√≥n
        header_frame = ctk.CTkFrame(marco_principal, height=60, corner_radius=12, fg_color=("#2b5797", "#0f3460")) # Esta l√≠nea crea un CTkFrame para el header con altura fija, esquinas redondeadas y colores para modos claro/oscuro
        # El frame se muestra en el marco principal, se extiende por toda la horizontal del marco # Comentario explicando el packing
        # y se deja un espacio de 10px arriba y abajo de este # Continuaci√≥n
        header_frame.pack(fill=tk.X, pady=(0, 10)) # Esta l√≠nea empaqueta el header_frame para que llene horizontalmente y agregue padding vertical

        titulo_label = ctk.CTkLabel( # Se crea un label para mostrar el titulo # Esta l√≠nea inicia la creaci√≥n de un CTkLabel para el t√≠tulo
            header_frame, # Se almacena en el frame del header # Par√°metro: parent widget es header_frame
            text="üß™ SIMULADOR DE LA LEY DE SNELL", # Se le agrega el texto al label # Par√°metro: texto con emoji y t√≠tulo
            font=("Roboto", 22, "bold"), # Se especifican la fuente del texto (Roboto), el tama√±o (22) y el grosor (bold o en negrita) # Par√°metro: fuente como tupla
                text_color=("#ffffff", "#ffffff") # Se indica el color del label (blanco) # Par√°metro: color de texto para modos claro/oscuro, ambos blanco
        ) # Cierre de la creaci√≥n del label
        # Se muestra el label, se coloca a la izquierda del header_frame, se deja un espacio de 20px a la derecha y a la izquierda, # Comentario explicando el packing
        # y un espacio de 15px arriba y abajo # Continuaci√≥n
        titulo_label.pack(side=tk.LEFT, padx=20, pady=15) # Esta l√≠nea empaqueta el label a la izquierda con padding

        # Se crea un boton para cambiar el tema de la interfaz # Comentario describiendo la creaci√≥n del bot√≥n de tema
        self.boton_tema = ctk.CTkButton( # Esta l√≠nea inicia la creaci√≥n de un CTkButton para cambiar el tema
            header_frame, # Se almacena en el header_frame (donde mismo que el label anterior) # Par√°metro: parent es header_frame
            text="‚òÄÔ∏è Modo Claro", # Se le agrega el texto al bot√≥n # Par√°metro: texto inicial con emoji
            width=140, # Se le asigna un ancho de 140px # Par√°metro: ancho fijo
            height=35, # Se le asigna una altura de 35px # Par√°metro: altura fija
            corner_radius=8, # Se redondean las esquinas con un radio de 8px # Par√°metro: radio de esquinas
            font=("Roboto", 12, "bold"), # Se especifican la fuente del texto (Roboto), el tama√±o (12) y el grosor (bold o en negrita) # Par√°metro: fuente
            fg_color=("#3a7ebf", "#1f538d"), # Se indica el color del bot√≥n # Par√°metro: color de fondo para modos claro/oscuro
            hover_color=("#5a9edf", "#2a6bad"), # Se le agrega un efecto de color cuando el mouse est√° sobre √©l # Par√°metro: color al hover
            command=self.cambiar_tema # Se le asiga en comando de cambiar el tema cuando se le da clic # Par√°metro: funci√≥n a llamar al clic
        ) # Cierre de la creaci√≥n del bot√≥n
        # Se muestra el bot√≥n, se coloca a la derecha del header_frame, se deja un espacio de 20px a la derecha y a la izquierda, # Comentario explicando el packing
        # y un espacio de 12px arriba y abajo # Continuaci√≥n
        self.boton_tema.pack(side=tk.RIGHT, padx=20, pady=12) # Esta l√≠nea empaqueta el bot√≥n a la derecha con padding

        # Se crea un frame contenedor para contener el panel de control, se almacena en el marco principal y se le da u color transparente # Comentario describiendo la creaci√≥n del contenedor_inferior
        contenedor_inferior = ctk.CTkFrame(marco_principal, fg_color="transparent") # Esta l√≠nea crea un CTkFrame transparente en marco_principal
        # Se muestra en el marco principal, se extiende por todo el marco, y si el marco crece, el contenedor tambi√©n # Comentario explicando el packing
        contenedor_inferior.pack(fill=tk.BOTH, expand=True) # Esta l√≠nea empaqueta el frame para que llene y se expanda

        # Se crea un frame con scroll para el panel de control # Comentario describiendo la creaci√≥n del panel_control
        panel_control = ctk.CTkScrollableFrame( # Esta l√≠nea inicia la creaci√≥n de un CTkScrollableFrame para scroll
            contenedor_inferior, # Se almacena en el frame anterior # Par√°metro: parent es contenedor_inferior
            width=350, # Le establece un ancho de 350px # Par√°metro: ancho fijo
            corner_radius=12, # Redondeo las esquinas con un radio de 12px # Par√°metro: radio de esquinas
            fg_color=("#D1DBE6", "#16213e"), # Se establecen los colores del frame (azul gris√°ceo muy claro, y azul marino oscuro con tono violeta) # Par√°metro: colores para modos
            border_width=2, # Se establece un borde de 2px alrededor el frame # Par√°metro: ancho de borde
            border_color=("#3a7ebf", "#2b5797") # Se establecen los colores del borde (azul medio brillante y azul oscuro elegante) # Par√°metro: colores de borde
        ) # Cierre de la creaci√≥n
        # Se muestra el panel de control en el contenedor inferior, se coloca a la izquierda, se extiende verticalmente # Comentario explicando el packing
        # y se deja un espacio de 10px a la derecha # Continuaci√≥n
        panel_control.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10), expand=False) # Esta l√≠nea empaqueta a la izquierda, llenando verticalmente, con padding

        # Se crea un label para agregar un t√≠tulo # Comentario describiendo el t√≠tulo del panel
        titulo_panel = ctk.CTkLabel( # Esta l√≠nea inicia la creaci√≥n de un CTkLabel para el t√≠tulo del panel
            panel_control, # Se almacena en el frame con scroll anterior # Par√°metro: parent
            text="üí° Panel de Control", # Se le agrega el texto al label # Par√°metro: texto
            font=("Roboto", 18, "bold"), # Se especifican la fuente del texto (Roboto), el tama√±o (18) y el grosor (bold o en negrita) # Par√°metro: fuente
            text_color=("#1a1a2e", "#ffffff") # Se indica el color del bot√≥n # Par√°metro: color de texto (nota: dice "bot√≥n" pero es label)
        ) # Cierre
        # Se muestra el label en el frame del panel de control, agregando un espacio de 15px arriba y abajo, # Comentario
        # y 10px a la derecha y a la izquierda # Continuaci√≥n
        titulo_panel.pack(pady=15, padx=10) # Empaqueta con padding

        # Se crea un label para agregar un t√≠tulo # Comentario para el label de interfaces
        label_interfaces = ctk.CTkLabel( # Inicio creaci√≥n
            panel_control,  # Se almacena en el frame con scroll anterior # Parent
            text="N√∫mero de Interfaces Activas:",  # Se le agrega el texto al label # Texto
            font=("Roboto", 13, "bold"), # Se especifican la fuente del texto (Roboto), el tama√±o (13) y el grosor (bold o en negrita) # Fuente
            text_color=("#2c3e50", "#e0e0e0")# Se indica el color del bot√≥n # Color de texto
        ) # Cierre
        # Se muestra el label en el frame del panel de control, agregando un espacio de 10px arriba y 5px abajo, # Comentario
        # y 10px a la derecha y a la izquierda # Continuaci√≥n
        label_interfaces.pack(pady=(10, 5), padx=10) # Empaqueta

        # Se crea un frame para almacenar los sliders para el √°ngulo y el n√∫mero de interfaces # Comentario para marco_slider_interfaces
        # y se almacena en el frame del panel del control # Continuaci√≥n
        marco_slider_interfaces = ctk.CTkFrame(panel_control, fg_color=("#D1DBE6", "#16213e")) # Crea frame con colores
        # Se muestra en el frame del panel del control, se deja un espacio de 15px a la derecha e izquierda, # Comentario
        # y deja un espacio de 5px arriba y abajo # Continuaci√≥n
        marco_slider_interfaces.pack(fill=tk.X, padx=15, pady=5) # Empaqueta

        # Se crea un slider para seleccionar el n√∫mero de interfaces # Comentario para slider_interfaces
        slider_interfaces = ctk.CTkSlider( # Inicio creaci√≥n
            marco_slider_interfaces, # Se almacena en el frame para almacenar los sliders # Parent
            from_=1, # Indica el valor minimo del slider # Par√°metro: valor inicial
            to=4, # Indica el valor maximo del slider # Par√°metro: valor final
            number_of_steps=3, # Divide el rango en 3 pasos o partes # Par√°metro: pasos
            variable=self.numero_interfaces, # Asocia el valor del slider con el del n√∫mero de interfaces # Variable vinculada
            orientation="horizontal", # Indica la orientaci√≥n del slider # Orientaci√≥n
            command=self.al_cambiar_interfaces, # Ejecuta la funci√≥n al mover el slider # Comando al cambio
            button_color=("#3a7ebf", "#2b5797"), # Indica el color del bot√≥n del deslizador # Color bot√≥n
            button_hover_color=("#5a9edf", "#3a7ebf"), # Indica el color del bot√≥n del slider cuando el mouse est√° sobre √©l # Hover bot√≥n
            progress_color=("#5a9edf", "#0f3460"), # Indica el color del slider lleno # Color progreso
            fg_color=("#b8c5d6", "#2c3e50"), # Indica el color del slider vacio # Color fondo
            width=200 # Define un ancho de 200px del bot√≥n # Ancho
        ) # Cierre
        # Se muestra el slider, se coloca a la izquierda, se expande por toda la horizontal del frame, # Comentario
        # si el frame se expande, el slider tambi√©n, y se deja un espacio de 5px a la izquierda y 10px a la derecha # Continuaci√≥n
        slider_interfaces.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 10)) # Empaqueta

        self.etiqueta_interfaces = ctk.CTkLabel( # Crea label para mostrar el valor del slider de interfaces
            marco_slider_interfaces, # Parent
            text="1", # Texto inicial
            font=("Roboto", 14, "bold"), # Fuente
            width=40, # Ancho
            fg_color=("#3a7ebf", "#0f3460"), # Color fondo
            corner_radius=6, # Radio esquinas
            text_color=("#ffffff", "#ffffff") # Color texto
        ) # Cierre
        self.etiqueta_interfaces.pack(side=tk.LEFT, padx=5) # Empaqueta a la izquierda con padding

        separador1 = ctk.CTkFrame(panel_control, height=2, fg_color=("#a0aec0", "#34495e")) # Crea un frame como separador horizontal de 2px de alto con colores
        separador1.pack(fill=tk.X, pady=15, padx=15) # Empaqueta llenando horizontalmente con padding

        # √Ångulo de incidencia # Comentario secci√≥n para √°ngulo
        label_angulo = ctk.CTkLabel( # Crea label para t√≠tulo del √°ngulo
            panel_control, # Parent
            text="üì¶ √Ångulo de Incidencia", # Texto
            font=("Roboto", 13, "bold"), # Fuente
            text_color=("#2c3e50", "#e0e0e0") # Color
        ) # Cierre
        label_angulo.pack(pady=5, padx=10) # Empaqueta

        label_angulo_desc = ctk.CTkLabel( # Crea label para descripci√≥n del √°ngulo
            panel_control, # Parent
            text="(Medido desde el eje X horizontal, rayo incidente)", # Texto
            font=("Roboto", 9, "italic"), # Fuente
            text_color=("#5a6c7d", "#95a5a6") # Color
        ) # Cierre
        label_angulo_desc.pack(padx=10) # Empaqueta con padding horizontal

        marco_slider_angulo = ctk.CTkFrame(panel_control, fg_color=("#D1DBE6", "#16213e")) # Crea frame para el slider de √°ngulo con colores
        marco_slider_angulo.pack(fill=tk.X, padx=15, pady=5) # Empaqueta

        slider_angulo = ctk.CTkSlider( # Crea slider para √°ngulo
            marco_slider_angulo, # Parent
            from_=0, # M√≠nimo 0
            to=90, # M√°ximo 90
            variable=self.angulo_incidente, # Variable vinculada
            orientation="horizontal", # Orientaci√≥n
            command=lambda x: self.actualizar_simulacion(), # Comando: lambda que llama a actualizar_simulacion al cambio, par√°metro x es el valor actual (ignorado)
            button_color=("#3a7ebf", "#2b5797"), # Color bot√≥n
            button_hover_color=("#5a9edf", "#3a7ebf"), # Hover
            progress_color=("#5a9edf", "#0f3460"), # Progreso
            fg_color=("#b8c5d6", "#2c3e50"), # Fondo
            width=200 # Ancho
        ) # Cierre
        slider_angulo.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 10)) # Empaqueta

        self.etiqueta_angulo = ctk.CTkLabel( # Crea label para mostrar valor del √°ngulo
            marco_slider_angulo, # Parent
            text="30¬∞", # Texto inicial
            font=("Roboto", 14, "bold"), # Fuente
            width=60, # Ancho
            fg_color=("#3a7ebf", "#0f3460"), # Fondo
            corner_radius=6, # Radio
            text_color=("#ffffff", "#ffffff") # Color
        ) # Cierre
        self.etiqueta_angulo.pack(side=tk.LEFT, padx=5) # Empaqueta

        self.info_angulo = ctk.CTkLabel( # Crea label para info adicional del √°ngulo (inicial vac√≠o)
            panel_control, # Parent
            text="", # Texto inicial vac√≠o
            font=("Roboto", 10), # Fuente
            text_color=("#5a6c7d", "#95a5a6") # Color
        ) # Cierre
        self.info_angulo.pack(pady=5, padx=10) # Empaqueta
        separador2 = ctk.CTkFrame(panel_control, height=2, fg_color=("#a0aec0", "#34495e")) # Crea segundo separador
        separador2.pack(fill=tk.X, pady=15, padx=15) # Empaqueta

        # ---------------- Selecci√≥n de materiales y controles por capa ---------------- # # Comentario secci√≥n para selecci√≥n de materiales
        label_materiales = ctk.CTkLabel( # Crea label para t√≠tulo de materiales
            panel_control, # Parent
            text="üî¨ Materiales por Capa:", # Texto
            font=("Roboto", 14, "bold"), # Fuente
            text_color=("#2c3e50", "#e0e0e0") # Color
        ) # Cierre
        label_materiales.pack(pady=5, padx=10) # Empaqueta

        # Primera capa fija: Vac√≠o (no editable) # Comentario para capa fija
        marco_capa0 = ctk.CTkFrame( # Crea frame para capa 1
            panel_control, # Parent
            corner_radius=10, # Radio
            fg_color=("#e8f0f7", "#1a2332"), # Colores
            border_width=2, # Borde
            border_color=("#3a7ebf", "#2b5797") # Color borde
        ) # Cierre
        marco_capa0.pack(fill=tk.X, padx=15, pady=8) # Empaqueta

        label_capa0_titulo = ctk.CTkLabel( # Label t√≠tulo capa 1
            marco_capa0, # Parent
            text="Capa 1 - Vac√≠o (fijo)", # Texto
            font=("Roboto", 11, "bold"), # Fuente
            text_color=("#2c3e50", "#ffffff") # Color
        ) # Cierre
        label_capa0_titulo.pack(pady=(8, 2)) # Empaqueta

        label_capa0_material = ctk.CTkLabel( # Label material
            marco_capa0, # Parent
            text="Material: Vac√≠o", # Texto
            font=("Roboto", 10), # Fuente
            text_color=("#34495e", "#bdc3c7") # Color
        ) # Cierre
        label_capa0_material.pack(pady=2) # Empaqueta

        label_capa0_indice = ctk.CTkLabel( # Label √≠ndice
            marco_capa0, # Parent
            text="n = 1.0000", # Texto
            font=("Roboto", 10, "italic"), # Fuente
            text_color=("#5a6c7d", "#95a5a6") # Color
        ) # Cierre
        label_capa0_indice.pack(pady=(2, 8)) # Empaqueta

        # Crear controles para las 4 capas seleccionables # Comentario para bucle de capas
        self.marcos_materiales = [] # Inicializa lista vac√≠a para marcos de materiales
        for i in range(4): # Bucle for i de 0 a 3 para crear controles de 4 capas
            marco = ctk.CTkFrame( # Crea frame para cada capa
                panel_control, # Parent
                corner_radius=10, # Radio
                fg_color=("#e8f0f7", "#1a2332"), # Colores
                border_width=2, # Borde
                border_color=("#3a7ebf", "#2b5797") # Color borde
            ) # Cierre
            marco.pack(fill=tk.X, padx=15, pady=8) # Empaqueta

            # T√≠tulo de la capa # Comentario
            label_titulo_capa = ctk.CTkLabel( # Crea label t√≠tulo
                marco, # Parent
                text=f"Capa {i + 2}", # Texto din√°mico (Capa 2 a 5)
                font=("Roboto", 11, "bold"), # Fuente
                text_color=("#2c3e50", "#ffffff") # Color
            ) # Cierre
            label_titulo_capa.pack(pady=(8, 5)) # Empaqueta

            # Fila con men√∫ de opciones para elegir material # Comentario para fila de combo
            fila_combo = ctk.CTkFrame(marco, fg_color=("#e8f0f7", "#1a2332")) # Crea frame para la fila del combo de materiales
            fila_combo.pack(fill=tk.X, padx=10, pady=5) # Empaqueta

            label_material = ctk.CTkLabel( # Crea label "Material:"
                fila_combo, # Parent
                text="Material:", # Texto
                font=("Roboto", 10), # Fuente
                text_color=("#34495e", "#bdc3c7") # Color
            ) # Cierre
            label_material.pack(side=tk.LEFT, padx=(0, 8)) # Empaqueta a la izquierda

            combo = ctk.CTkOptionMenu( # Crea men√∫ desplegable (CTkOptionMenu) con materiales, vinculado a la variable correspondiente, y llama a actualizar_simulacion al cambiar
                fila_combo, # Parent
                variable=self.materiales_seleccionados[i + 1], # Variable vinculada
                values=list(self.materiales_disponibles.keys()), # Valores del men√∫ desde las claves del diccionario
                width=180, # Ancho
                height=28, # Altura
                corner_radius=8, # Radio
                font=("Roboto", 10), # Fuente
                dropdown_font=("Roboto", 10), # Fuente del desplegable
                fg_color=("#3a7ebf", "#2b5797"), # Color fondo
                button_color=("#2b5797", "#1f538d"), # Color bot√≥n
                button_hover_color=("#3a7ebf", "#2b5797"), # Hover bot√≥n
                command=lambda x: self.actualizar_simulacion() # Comando al cambio
            ) # Cierre
            combo.pack(side=tk.LEFT, padx=5) # Empaqueta a la izquierda

            # Fila para √≠ndice personalizado # Comentario para fila personalizada
            fila_personalizado = ctk.CTkFrame(marco, fg_color=("#e8f0f7", "#1a2332")) # Crea frame para entrada de √≠ndice personalizado
            fila_personalizado.pack(fill=tk.X, padx=10, pady=(5, 8)) # Empaqueta

            label_personalizado = ctk.CTkLabel( # Crea label "n personalizado:"
                fila_personalizado, # Parent
                text="n personalizado:", # Texto
                font=("Roboto", 9), # Fuente
                text_color=("#5a6c7d", "#95a5a6") # Color
            ) # Cierre
            label_personalizado.pack(side=tk.LEFT, padx=(0, 8)) # Empaqueta

            spin_n = ctk.CTkEntry( # Crea entrada de texto para √≠ndice personalizado, vinculada a la variable correspondiente
                fila_personalizado, # Parent
                textvariable=self.indices_personalizados[i + 1], # Variable vinculada
                width=100, # Ancho
                height=28, # Altura
                corner_radius=6, # Radio
                font=("Roboto", 10), # Fuente
                fg_color=("#ffffff", "#2c3e50"), # Fondo
                border_color=("#3a7ebf", "#2b5797"), # Color borde
                border_width=2 # Ancho borde
            ) # Cierre
            spin_n.pack(side=tk.LEFT, padx=5) # Empaqueta
            spin_n.bind("<KeyRelease>", lambda e, idx=i + 1: self.cambiar_personalizado(idx)) # Bind evento KeyRelease a lambda que llama cambiar_personalizado con idx

            self.marcos_materiales.append(marco) # Agrega el marco de la capa actual a la lista self.marcos_materiales para poder referenciarlo m√°s adelante si es necesario

        # ---------------- Canvas para dibujo ---------------- # # Comentario que marca la secci√≥n donde se crea el √°rea de dibujo (canvas) para la simulaci√≥n gr√°fica
        marco_canvas = ctk.CTkFrame( # Se crea un frame contenedor para el canvas, se almacena dentro del contenedor_inferior
            contenedor_inferior, # Se almacena en el frame contenedor_inferior que est√° al lado del panel de control
            corner_radius=12, # Se redondean las esquinas del frame con un radio de 12px para mantener el estilo moderno
            fg_color=("#f7f9fc", "#0d1117"), # Se establecen los colores de fondo del frame: claro (#f7f9fc) y oscuro (#0d1117)
            border_width=2, # Se establece un borde de 2px alrededor del frame
            border_color=("#3a7ebf", "#2b5797") # Se establecen los colores del borde para modos claro y oscuro
        ) # Cierre de la creaci√≥n del frame
        marco_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True) # Se muestra el frame en el contenedor_inferior, se coloca a la izquierda, se extiende en ambos direcciones y se expande si el contenedor crece

        self.canvas = tk.Canvas( # Se crea el canvas para dibujar la simulaci√≥n gr√°fica
            marco_canvas, # Se almacena en el frame marco_canvas
            bg="#f0f0f0", # Se establece el color de fondo del canvas en gris claro
            highlightthickness=0 # Se quita el borde de resalte del canvas para que no se vea
        ) # Cierre de la creaci√≥n del canvas
        self.canvas.pack(fill=tk.BOTH, expand=True, padx=3, pady=3) # Se muestra el canvas, se extiende en ambos direcciones, se expande si el frame crece, y se deja un margen de 3px alrededor
        # Redibujar cuando la ventana cambie de tama√±o # Comentario que explica el prop√≥sito del bind siguiente
        self.canvas.bind("<Configure>", lambda e: self.actualizar_simulacion()) # Se vincula el evento de cambio de tama√±o del canvas a una lambda que llama a actualizar_simulacion, par√°metro e es el evento (ignorado)

    def cambiar_tema(self): # Definici√≥n del m√©todo cambiar_tema, que no recibe par√°metros adicionales adem√°s de self
        """ Se crea este m√©todo para alterna entre modo oscuro y claro""" # Docstring describiendo el prop√≥sito del m√©todo: alternar entre modos claro y oscuro
        modo_actual = ctk.get_appearance_mode() # Obtiene el modo de apariencia actual de customtkinter ("Dark" o "Light")
        if modo_actual == "Dark": # Verifica si el modo actual es oscuro
            ctk.set_appearance_mode("light") # Cambia el modo de apariencia a claro
            self.boton_tema.configure(text="üåô Modo Oscuro") # Actualiza el texto del bot√≥n de tema para reflejar el cambio a modo oscuro
        else: # Caso contrario (modo claro)
            ctk.set_appearance_mode("dark") # Cambia el modo de apariencia a oscuro
            self.boton_tema.configure(text="‚òÄÔ∏è Modo Claro") # Actualiza el texto del bot√≥n de tema para reflejar el cambio a modo claro

    # ---------------- Funciones auxiliares (l√≥gica f√≠sica) ---------------- # # Comentario que marca la secci√≥n de funciones auxiliares para la l√≥gica f√≠sica
    def al_cambiar_interfaces(self, valor): # Definici√≥n del m√©todo al_cambiar_interfaces, que recibe el par√°metro valor (el valor actual del slider)
        """ Callback para el slider de n√∫mero de interfaces. # Docstring describiendo el prop√≥sito: callback para el slider de interfaces
        Convertimos el valor a entero y forzamos la actualizaci√≥n.""" # Continuaci√≥n del docstring
        valor_entero = int(float(valor)) # Convierte el valor (flotante) a entero para asegurarse de que sea un n√∫mero entero
        self.numero_interfaces.set(valor_entero) # Actualiza la variable de tkinter self.numero_interfaces con el valor entero
        self.etiqueta_interfaces.configure(text=str(valor_entero)) # Actualiza el texto de la etiqueta self.etiqueta_interfaces para mostrar el nuevo valor
        self.actualizar_simulacion() # Llama al m√©todo actualizar_simulacion para redibujar la simulaci√≥n con el nuevo n√∫mero de interfaces

    def cambiar_personalizado(self, indice_capa): # Definici√≥n del m√©todo cambiar_personalizado, que recibe el par√°metro indice_capa (el √≠ndice de la capa modificada)
        """ Se crea este m√©todo para el caso en que la capa est√° en modo 'Personalizado', # Docstring describiendo el prop√≥sito: actualizar si se modifica el √≠ndice personalizado
         actualizamos la simulaci√≥n cuando el usuario modifica el spinbox del √≠ndice n.""" # Continuaci√≥n del docstring
        if self.materiales_seleccionados[indice_capa].get() == "Personalizado": # Verifica si el material seleccionado para la capa es "Personalizado"
            self.actualizar_simulacion() # Llama al m√©todo actualizar_simulacion para redibujar con el nuevo √≠ndice personalizado

    def obtener_indice_refraccion(self, indice_capa): # Definici√≥n del m√©todo obtener_indice_refraccion, que recibe el par√°metro indice_capa (el √≠ndice de la capa)
        """ Se crea este m√©todo para devolver el √≠ndice de refracci√≥n para la capa indicada. # Docstring describiendo el prop√≥sito: obtener el √≠ndice de refracci√≥n de una capa
        Si el material es 'Personalizado', devuelve el valor del spinbox asociado. # Continuaci√≥n del docstring
        """
        material = self.materiales_seleccionados[indice_capa].get() # Obtiene el nombre del material seleccionado para la capa desde la variable de tkinter
        if material == "Personalizado": # Verifica si el material es "Personalizado"
            try: # Intenta ejecutar el bloque siguiente
                return float(self.indices_personalizados[indice_capa].get()) # Convierte y retorna el valor del √≠ndice personalizado desde la variable de tkinter
            except: # Captura cualquier excepci√≥n (como valor no num√©rico)
                return 1.5 # Retorna el valor por defecto 1.5 si hay error
        return self.materiales_disponibles[material] # Retorna el √≠ndice del diccionario de materiales disponibles para el material seleccionado

    def calcular_angulo_refraccion(self, angulo_horizontal_deg, n1, n2): # Definici√≥n del m√©todo calcular_angulo_refraccion, que recibe par√°metros angulo_horizontal_deg (√°ngulo horizontal en grados), n1 (√≠ndice incidente), n2 (√≠ndice transmisor)
        """
        Se crea este m√©todo para calcular el √°ngulo refractado usando la Ley de Snell. # Docstring describiendo el prop√≥sito: calcular √°ngulo refractado con Ley de Snell
        Entrada: # Inicio de descripci√≥n de entrada
            angulo_horizontal_deg: √°ngulo medido respecto al eje X (horizontal) # Par√°metro descrito
            n1: √≠ndice del medio incidente # Par√°metro descrito
            n2: √≠ndice del medio transmisor # Par√°metro descrito
        Salida: # Inicio de descripci√≥n de salida
            √°ngulo horizontal refractado (grados) o None si ocurre TIR (sin soluci√≥n real) # Salida descrita
        Nota: # Nota adicional
            Internamente convertimos a √°ngulo respecto a la normal (vertical): # Explicaci√≥n interna
                theta_normal = 90¬∞ - theta_horizontal # F√≥rmula de conversi√≥n
        """
        # Convertir a √°ngulo respecto a la normal (grados) # Comentario explicando la conversi√≥n
        theta_n1 = 90.0 - angulo_horizontal_deg # Calcula el √°ngulo respecto a la normal en grados
        # Convertir a radianes para trigonometr√≠a # Comentario explicando la conversi√≥n a radianes
        theta_n1_rad = math.radians(theta_n1) # Convierte el √°ngulo normal a radianes usando math.radians

        try: # Intenta ejecutar el bloque de c√°lculo
            # Ley de Snell: n1 * sin(theta_n1) = n2 * sin(theta_n2) # Comentario con la f√≥rmula de Snell
            sin_theta2 = (n1 / n2) * math.sin(theta_n1_rad) # Calcula el seno del √°ngulo refractado usando math.sin
            # Si el valor absoluto excede 1 -> asin no tiene soluci√≥n real -> TIR # Comentario explicando la condici√≥n de TIR
            if abs(sin_theta2) > 1.0: # Verifica si el seno excede 1 en valor absoluto
                return None # Retorna None indicando reflexi√≥n interna total (TIR)
            theta_n2_rad = math.asin(sin_theta2) # Calcula el √°ngulo refractado en radianes usando math.asin
            theta_n2_deg = math.degrees(theta_n2_rad) # Convierte el √°ngulo refractado a grados usando math.degrees
            # Convertir de nuevo a √°ngulo respecto a la horizontal # Comentario explicando la reconversi√≥n
            angulo_horizontal_refractado = 90.0 - theta_n2_deg # Calcula el √°ngulo horizontal refractado
            return angulo_horizontal_refractado # Retorna el √°ngulo refractado en grados
        except Exception: # Captura cualquier excepci√≥n durante el c√°lculo
            # En caso de error num√©rico, devolver None para indicar fallo # Comentario explicando el manejo de error
            return None # Retorna None en caso de error num√©rico

    # ---------------- Funciones de dibujo de rayos ---------------- # # Comentario que marca la secci√≥n de funciones para dibujar rayos en el canvas
    def dibujar_rayo_incidente(self, x0, y0, angulo_horizontal_deg, largo, color="#ff4444", grosor=4): # Definici√≥n del m√©todo dibujar_rayo_incidente, que recibe par√°metros x0 y y0 (punto de impacto), angulo_horizontal_deg (√°ngulo), largo (longitud), color (por defecto rojo), grosor (por defecto 4)
        """
        Dibuja el rayo incidente que llega al punto (x0, y0). # Docstring describiendo el prop√≥sito: dibujar rayo incidente
        El rayo parte lejos a la izquierda y apunta al punto de impacto. # Continuaci√≥n
        F√≥rmulas: # Inicio de f√≥rmulas
            x_inicio = x0 - L * cos(theta) # F√≥rmula para x inicial
            y_inicio = y0 - L * sin(theta) # F√≥rmula para y inicial
        """
        theta_rad = math.radians(angulo_horizontal_deg) # Convierte el √°ngulo horizontal a radianes usando math.radians
        x_inicio = x0 - largo * math.cos(theta_rad) # Calcula la coordenada x inicial del rayo usando math.cos
        y_inicio = y0 - largo * math.sin(theta_rad) # Calcula la coordenada y inicial del rayo usando math.sin

        # L√≠nea con flecha que termina en (x0, y0) # Comentario explicando la creaci√≥n de la l√≠nea
        self.canvas.create_line(x_inicio, y_inicio, x0, y0, # Crea una l√≠nea en el canvas desde (x_inicio, y_inicio) hasta (x0, y0)
                                fill=color, width=grosor, # Par√°metros: color de relleno y ancho de l√≠nea
                                arrow=tk.LAST, arrowshape=(12, 15, 6)) # Par√°metros: flecha al final con forma especificada
        return (x_inicio, y_inicio) # Retorna la tupla con las coordenadas iniciales del rayo

    def dibujar_rayo_reflejado(self, x0, y0, angulo_horizontal_deg, largo, color="#ffaaaa", grosor=3): # Definici√≥n del m√©todo dibujar_rayo_reflejado, que recibe par√°metros x0 y y0 (punto de impacto), angulo_horizontal_deg, largo, color (por defecto rosa claro), grosor (por defecto 3)
        """ Se crea el m√©todo para dibujar el rayo reflejado que sale del punto (x0, y0). # Docstring describiendo el prop√≥sito: dibujar rayo reflejado
        El rayo reflejado mantiene el mismo √°ngulo (simetr√≠a respecto a la normal). # Continuaci√≥n
        Se dibuja hacia arriba-derecha desde el punto de impacto. """ # Continuaci√≥n
        theta_rad = math.radians(angulo_horizontal_deg) # Convierte el √°ngulo a radianes usando math.radians
        x_fin = x0 + largo * math.cos(theta_rad) # Calcula la coordenada x final del rayo usando math.cos
        y_fin = y0 - largo * math.sin(theta_rad) # Calcula la coordenada y final del rayo (hacia arriba) usando math.sin

        # L√≠nea punteada para indicar reflexi√≥n parcial # Comentario explicando la creaci√≥n de la l√≠nea punteada
        self.canvas.create_line(x0, y0, x_fin, y_fin, # Crea una l√≠nea en el canvas desde (x0, y0) hasta (x_fin, y_fin)
                                fill=color, width=grosor, dash=(8, 4)) # Par√°metros: color, ancho y patr√≥n de dashes para punteado
        return (x_fin, y_fin) # Retorna la tupla con las coordenadas finales del rayo

    def dibujar_rayo_refractado(self, x0, y0, angulo_horizontal_deg, largo, color="#00ccff", grosor=4): # Definici√≥n del m√©todo dibujar_rayo_refractado, que recibe par√°metros x0 y y0, angulo_horizontal_deg, largo, color (por defecto cian), grosor (por defecto 4)
        """ Se crea el m√©todo para dibujar el rayo refractado que sale del punto (x0, y0) hacia abajo/derecha # Docstring describiendo el prop√≥sito: dibujar rayo refractado
        seg√∫n el √°ngulo horizontal refractado calculado. """ # Continuaci√≥n
        theta_rad = math.radians(angulo_horizontal_deg) # Convierte el √°ngulo a radianes usando math.radians
        x_fin = x0 + largo * math.cos(theta_rad) # Calcula la coordenada x final usando math.cos
        y_fin = y0 + largo * math.sin(theta_rad) # Calcula la coordenada y final (hacia abajo) usando math.sin

        # L√≠nea con flecha que indica el rayo transmitido a la siguiente capa # Comentario explicando la creaci√≥n de la l√≠nea
        self.canvas.create_line(x0, y0, x_fin, y_fin, # Crea una l√≠nea desde (x0, y0) hasta (x_fin, y_fin)
                                fill=color, width=grosor, # Par√°metros: color y ancho
                                arrow=tk.LAST, arrowshape=(12, 15, 6)) # Par√°metros: flecha al final con forma
        return (x_fin, y_fin) # Retorna la tupla con las coordenadas finales

    # ---------------- Funci√≥n principal: recalcular y dibujar ---------------- # # Comentario que marca la secci√≥n de la funci√≥n principal de actualizaci√≥n
    def actualizar_simulacion(self): # Definici√≥n del m√©todo actualizar_simulacion, que no recibe par√°metros adicionales
        """ Se crea la funci√≥n central que borra el canvas y redibuja: # Docstring describiendo el prop√≥sito: borrar y redibujar la simulaci√≥n
         - las capas (rect√°ngulos horizontales), # Elemento redibujado
         - la posici√≥n del punto de impacto, # Elemento redibujado
         - los rayos incidente, refractados y reflejados, # Elemento redibujado
         - etiquetas de √°ngulos y leyenda. """ # Elemento redibujado
        # Limpiar canvas # Comentario explicando la limpieza
        self.canvas.delete("all") # Borra todos los elementos dibujados en el canvas

        ancho = self.canvas.winfo_width() # Obtiene el ancho actual del canvas usando winfo_width
        alto = self.canvas.winfo_height() # Obtiene el alto actual del canvas usando winfo_height
        if ancho < 2 or alto < 2: # Verifica si el canvas tiene un tama√±o m√≠nimo v√°lido
            return  # canvas no inicializado a√∫n # Retorna temprano si el canvas no est√° inicializado para evitar errores

        # Obtener √°ngulos actuales # Comentario explicando obtenci√≥n de √°ngulos
        ang_h = self.angulo_incidente.get() # Obtiene el valor actual del √°ngulo incidente de la variable de tkinter
        ang_n = 90.0 - ang_h # Calcula el √°ngulo respecto a la normal restando de 90 grados
        self.etiqueta_angulo.configure(text=f"{ang_h:.1f}¬∞") # Actualiza el texto de la etiqueta del √°ngulo horizontal con formato de 1 decimal
        self.info_angulo.configure(text=f"Œ∏ normal = {ang_n:.1f}¬∞") # Actualiza el texto de la etiqueta del √°ngulo normal con formato

        # N√∫mero total de capas (incluye la capa inicial de vac√≠o) # Comentario explicando c√°lculo de capas
        total_capas = self.numero_interfaces.get() + 1 # Obtiene el n√∫mero de interfaces y suma 1 para incluir la capa inicial
        altura_capa = alto / total_capas # Calcula la altura de cada capa dividiendo el alto total por el n√∫mero de capas

        # Punto de incidencia horizontal fijo (30% ancho del canvas) # Comentario explicando posici√≥n fija
        x_impacto = ancho * 0.3 # Calcula la posici√≥n x del punto de impacto como el 30% del ancho del canvas
        largo_base_rayo = min(ancho * 0.18, altura_capa * 0.75) # Calcula la longitud base del rayo tomando el m√≠nimo entre el 18% del ancho y el 75% de la altura de capa

        # Dibujar cada capa como rect√°ngulo horizontal y su recuadro informativo # Comentario explicando el bucle de dibujo de capas
        for i in range(total_capas): # Recorre cada capa desde 0 hasta total_capas - 1
            y_arriba = i * altura_capa # Calcula la coordenada y superior de la capa multiplicando i por altura_capa
            y_abajo = (i + 1) * altura_capa # Calcula la coordenada y inferior sumando una altura_capa

            color = self.colores_capas[i % len(self.colores_capas)] # Selecciona el color de la capa usando m√≥dulo para ciclar la lista de colores
            self.canvas.create_rectangle(0, y_arriba, ancho, y_abajo, # Dibuja un rect√°ngulo en el canvas desde (0, y_arriba) hasta (ancho, y_abajo)
                                         fill=color, outline="white", width=3) # Par√°metros: relleno con color, borde blanco de 3px

            # Informaci√≥n de la capa (material + √≠ndice n) # Comentario explicando dibujo de info
            material = self.materiales_seleccionados[i].get() # Obtiene el material seleccionado de la variable de tkinter
            n = self.obtener_indice_refraccion(i) # Llama al m√©todo para obtener el √≠ndice de refracci√≥n de la capa
            texto_info = f"Capa {i + 1}: {material}\nn = {n:.4f}" # Formatea el texto con el n√∫mero de capa, material e √≠ndice con 4 decimales
            self.canvas.create_rectangle(10, y_arriba + 10, 150, y_arriba + 65, # Dibuja un rect√°ngulo blanco para el info desde (10, y_arriba+10) hasta (150, y_arriba+65)
                                         fill="white", outline="black", width=2) # Par√°metros: relleno blanco, borde negro de 2px
            self.canvas.create_text(80, y_arriba + 37, text=texto_info, # Dibuja el texto en el centro del rect√°ngulo
                                    font=("Arial", 10, "bold"), justify=tk.CENTER) # Par√°metros: fuente Arial 10 bold, justificaci√≥n centrada

        # ---------------- Trazado de rayos a trav√©s de las interfaces ---------------- # # Comentario que marca la secci√≥n de trazado de rayos
        angulo_actual_h = ang_h  # empezamos con el √°ngulo incidente horizontal # Inicializa el √°ngulo actual con el incidente
        x_actual = x_impacto # Inicializa la posici√≥n x actual con la del impacto inicial

        for indice_interfaz in range(total_capas): # Recorre cada interfaz desde 0 hasta total_capas - 1
            # Coordenada vertical de la l√≠nea que separa la capa i de la siguiente # Comentario explicando c√°lculo de y
            y_linea_inferior = (indice_interfaz + 1) * altura_capa # Calcula la y de la interfaz inferior multiplicando por altura_capa

            if indice_interfaz == 0: # Verifica si es la primera interfaz
                # Primera interfaz: dibujar rayo incidente que llega al primer l√≠mite # Comentario
                self.dibujar_rayo_incidente(x_actual, y_linea_inferior, angulo_actual_h, largo_base_rayo) # Llama al m√©todo para dibujar el rayo incidente

                # Dibujar la normal (l√≠nea vertical punteada) alrededor del punto de impacto # Comentario
                self.canvas.create_line(x_actual, y_linea_inferior - 60, x_actual, y_linea_inferior + 60, # Dibuja l√≠nea vertical desde 60px arriba hasta 60px abajo
                                        fill="yellow", dash=(5, 3), width=2) # Par√°metros: color amarillo, dashes para punteado, ancho 2px

                # Punto de impacto como un c√≠rculo amarillo # Comentario
                r = 6 # Define el radio del c√≠rculo como 6px
                self.canvas.create_oval(x_actual - r, y_linea_inferior - r, x_actual + r, y_linea_inferior + r, # Dibuja √≥valo (c√≠rculo) alrededor del punto de impacto
                                        fill="yellow", outline="white", width=2) # Par√°metros: relleno amarillo, borde blanco de 2px

                # Etiqueta con √°ngulos del rayo incidente (horizontal y normal) # Comentario
                self.canvas.create_text(x_actual - 100, y_linea_inferior - 30, # Dibuja texto 100px a la izquierda y 30px arriba del impacto
                                        text=f"Incidente\nŒ∏={angulo_actual_h:.1f}¬∞ (horiz)\nŒ∏={90 - angulo_actual_h:.1f}¬∞ (normal)", # Texto formateado con √°ngulos
                                        font=("Arial", 9, "bold"), fill="white", anchor="e") # Par√°metros: fuente Arial 9 bold, color blanco, anclado al este

                # Dibujar rayo reflejado parcial hacia arriba # Comentario
                self.dibujar_rayo_reflejado(x_actual, y_linea_inferior, angulo_actual_h, largo_base_rayo * 0.6) # Llama al m√©todo para dibujar reflejo parcial con 60% de longitud

            # Si existe siguiente capa, calcular refracci√≥n entre capa actual y la siguiente # Comentario
            if indice_interfaz < total_capas - 1: # Verifica si hay una capa siguiente
                n1 = self.obtener_indice_refraccion(indice_interfaz) # Obtiene el √≠ndice de la capa actual llamando al m√©todo
                n2 = self.obtener_indice_refraccion(indice_interfaz + 1) # Obtiene el √≠ndice de la siguiente capa

                angulo_refractado_h = self.calcular_angulo_refraccion(angulo_actual_h, n1, n2) # Calcula el √°ngulo refractado llamando al m√©todo

                if angulo_refractado_h is None: # Verifica si hay reflexi√≥n interna total (None)
                    # REFLEXI√ìN INTERNA TOTAL (TIR): dibujar reflejo fuerte y notificar # Comentario
                    self.dibujar_rayo_reflejado(x_actual, y_linea_inferior, angulo_actual_h, # Llama al m√©todo para dibujar reflejo fuerte
                                               largo_base_rayo, color="#ff8800", grosor=5) # Con color naranja y grosor 5

                    # Aviso visual de TIR # Comentario
                    self.canvas.create_rectangle(x_actual + 40, y_linea_inferior - 50, # Dibuja rect√°ngulo naranja para aviso 40px a la derecha y 50px arriba
                                                 x_actual + 240, y_linea_inferior - 10, # Hasta 240px a la derecha y 10px arriba
                                                 fill="orange", outline="black", width=2) # Par√°metros: relleno naranja, borde negro de 2px
                    self.canvas.create_text(x_actual + 140, y_linea_inferior - 30, # Dibuja texto centrado en el rect√°ngulo
                                            text="‚ö† REFLEXI√ìN INTERNA TOTAL", # Texto de aviso con emoji
                                            font=("Arial", 10, "bold"), fill="black") # Par√°metros: fuente Arial 10 bold, color negro
                    # Detener trazado ya que no hay transmisi√≥n # Comentario
                    break # Sale del bucle for para detener el trazado de rayos
                else: # Caso de refracci√≥n normal
                    # Hay refracci√≥n: dibujar rayo refractado en la siguiente capa # Comentario
                    largo_siguiente = min(largo_base_rayo, altura_capa * 0.7) # Calcula la longitud del rayo refractado limitada por el 70% de la altura de capa
                    x_fin, y_fin = self.dibujar_rayo_refractado(x_actual, y_linea_inferior, # Llama al m√©todo para dibujar el rayo refractado
                                                                angulo_refractado_h, largo_siguiente) # Con el √°ngulo calculado y longitud

                    # Dibujar normal y punto de impacto (decorativo) # Comentario
                    self.canvas.create_line(x_actual, y_linea_inferior - 60, x_actual, y_linea_inferior + 60, # Dibuja l√≠nea normal vertical punteada
                                            fill="yellow", dash=(5, 3), width=2) # Par√°metros: amarillo, dashes, ancho 2
                    r = 6 # Define radio 6px
                    self.canvas.create_oval(x_actual - r, y_linea_inferior - r, x_actual + r, y_linea_inferior + r, # Dibuja c√≠rculo amarillo en impacto
                                            fill="yellow", outline="white", width=2) # Par√°metros: relleno, borde

                    # Etiqueta con √°ngulos en la interfaz para el rayo refractado # Comentario
                    self.canvas.create_text(x_actual + 100, y_linea_inferior + 30, # Dibuja texto 100px a la derecha y 30px abajo
                                            text=f"Refractado\nŒ∏={angulo_refractado_h:.1f}¬∞ (horiz)\nŒ∏={90-angulo_refractado_h:.1f}¬∞ (normal)", # Texto formateado
                                            font=("Arial", 9, "bold"), fill="white", anchor="w") # Par√°metros: fuente, color blanco, anclado al oeste

                    # Dibujar rayo reflejado parcial # Comentario
                    self.dibujar_rayo_reflejado(x_actual, y_linea_inferior, angulo_actual_h, largo_base_rayo * 0.5) # Llama al m√©todo para reflejo parcial con 50% longitud

                    # Actualizar variables para la siguiente interfaz: # Comentario
                    # el rayo transmitido se convierte en el incidente para la interfaz siguiente # Continuaci√≥n
                    angulo_actual_h = angulo_refractado_h # Actualiza el √°ngulo actual al refractado para la siguiente iteraci√≥n
                    x_actual = x_fin # Actualiza la posici√≥n x actual al final del rayo refractado

        # Dibujar leyenda explicativa en la esquina superior derecha # Comentario
        self.dibujar_leyenda(ancho, alto) # Llama al m√©todo dibujar_leyenda pasando ancho y alto del canvas

    # ---------------- Funci√≥n para dibujar la leyenda ---------------- # # Comentario que marca la secci√≥n de la funci√≥n para dibujar la leyenda
    def dibujar_leyenda(self, ancho_canvas, alto_canvas): # Definici√≥n del m√©todo dibujar_leyenda, que recibe par√°metros ancho_canvas y alto_canvas (dimensiones del canvas)
        """ Este m√©todo dibuja un recuadro explicativo con el significado de colores y tipos de rayos. """ # Docstring describiendo el prop√≥sito: dibujar recuadro con leyenda de rayos
        x_leyenda = ancho_canvas - 220 # Calcula la posici√≥n x de la leyenda restando 220 del ancho para colocarla a la derecha
        y_leyenda = 20 # Establece la posici√≥n y fija en 20px desde arriba

        self.canvas.create_rectangle(x_leyenda - 15, y_leyenda - 10, # Dibuja rect√°ngulo para la leyenda desde (x-15, y-10)
                                     x_leyenda + 205, y_leyenda + 150, # Hasta (x+205, y+150)
                                     fill="white", outline="black", width=2) # Par√°metros: relleno blanco, borde negro de 2px
        self.canvas.create_text(x_leyenda + 95, y_leyenda + 5, text="üìñ Leyenda", # Dibuja texto "Leyenda" centrado arriba
                                font=("Arial", 12, "bold"), anchor="n") # Par√°metros: fuente Arial 12 bold, anclado al norte

        y_offset = y_leyenda + 30 # Inicializa el offset vertical para los elementos de la leyenda en y_leyenda + 30

        # Rayo incidente # Comentario para el rayo incidente en la leyenda
        self.canvas.create_line(x_leyenda, y_offset, x_leyenda + 50, y_offset, # Dibuja l√≠nea horizontal de 50px
                                fill="#ff4444", width=4, arrow=tk.LAST) # Par√°metros: color rojo, ancho 4, flecha al final
        self.canvas.create_text(x_leyenda + 60, y_offset, text="Rayo Incidente", # Dibuja texto al lado de la l√≠nea
                                font=("Arial", 10), anchor="w") # Par√°metros: fuente Arial 10, anclado al oeste

        y_offset += 30 # Incrementa el offset en 30px para el siguiente elemento

        # Rayo refractado # Comentario para el rayo refractado
        self.canvas.create_line(x_leyenda, y_offset, x_leyenda + 50, y_offset, # Dibuja l√≠nea horizontal
                                fill="#00ccff", width=4, arrow=tk.LAST) # Color cian, ancho 4, flecha
        self.canvas.create_text(x_leyenda + 60, y_offset, text="Rayo Refractado", # Texto al lado
                                font=("Arial", 10), anchor="w") # Fuente y anclaje

        y_offset += 30 # Incrementa offset

        # Rayo reflejado # Comentario para el rayo reflejado
        self.canvas.create_line(x_leyenda, y_offset, x_leyenda + 50, y_offset, # Dibuja l√≠nea horizontal
                                fill="#ffaaaa", width=3, dash=(8, 4)) # Color rosa, ancho 3, dashes para punteado
        self.canvas.create_text(x_leyenda + 60, y_offset, text="Rayo Reflejado", # Texto al lado
                                font=("Arial", 10), anchor="w") # Fuente y anclaje


# ---------------- Bloque principal (ejecuci√≥n) ---------------- # # Comentario que marca el bloque principal de ejecuci√≥n
if __name__ == "__main__": # Verifica si el archivo se est√° ejecutando directamente (no importado como m√≥dulo)
    ventana = ctk.CTk() # Crea la ventana principal usando ctk.CTk() como instancia de la ventana ra√≠z
    app = SimuladorSnell(ventana) # Crea una instancia de SimuladorSnell pasando la ventana como par√°metro, inicializando la app
    ventana.mainloop() # Inicia el bucle principal de eventos de tkinter para mantener la ventana abierta y responsive